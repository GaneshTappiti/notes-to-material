import Seo from "@/components/Seo";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { useState, useMemo, useEffect } from 'react';
import { PDFViewer, PDFDownloadLink } from '@react-pdf/renderer';
import { ExamCompactDoc, QAItem } from '@/export/ExamCompactDoc';
import { PocketSummaryDoc } from '@/export/PocketSummaryDoc';
import { trimToSentence } from '@/lib/utils';
import { createExport, getJobResults } from '@/lib/api';
import { toast } from "@/components/ui/use-toast";
import { useSearchParams } from 'react-router-dom';

const TemplatesExport = () => {
  const [template, setTemplate] = useState('compact');
  const [title, setTitle] = useState('Course Pack Title');
  const [footer, setFooter] = useState('Generated locally • Scollab');
  const [exporting, setExporting] = useState(false);
  const [lastExport, setLastExport] = useState<{id: string; url: string} | null>(null);
  const [searchParams] = useSearchParams();
  const jobId = searchParams.get('job_id');
  const [jobItems, setJobItems] = useState<QAItem[] | null>(null);

  // Load job items if job_id present
  useEffect(()=>{
    if (!jobId) { setJobItems(null); return; }
    getJobResults(jobId).then(r => {
      const mapped: QAItem[] = (r.results || []).map((it: any, i: number) => ({
        id: String(i),
        question: it.question || it.question_text || `Q${i+1}`,
        answer: (it.answers && (it.answers['2'] || it.answers['5'] || it.answers['10'])) || it.answer || '',
        marks: it.answers ? (it.answers['10']?10: it.answers['5']?5:2) : (it.marks || 2)
      }));
      setJobItems(mapped);
    });
  }, [jobId]);

  const items: QAItem[] = useMemo(() => (jobItems || [
    { id: '1', question: 'Define photosynthesis.', answer: 'Process by which green plants convert light energy into chemical energy (glucose) using CO2 and water.', marks: 2 },
    { id: '2', question: 'List two stages of photosynthesis.', answer: 'Light-dependent reactions and Calvin cycle.', marks: 2 },
  ]), [jobItems]);

  const doc = template === 'pocket'
    ? <PocketSummaryDoc title={title} footer={footer} items={items.map(i => ({...i, answer: trimToSentence(i.answer, 180)}))} />
    : <ExamCompactDoc title={title} footer={footer} items={items} />;

  const triggerBackendExport = async () => {
    setExporting(true);
    try {
      // For now we don't have a job id context here; assume a client-only preview OR pick first sample job id if stored
      const fakeJobId = jobId || 'preview';
      const res = await createExport({ job_id: fakeJobId, template, title, footer });
      setLastExport({ id: res.export_id, url: res.download_url });
      toast({ title: 'Export ready', description: 'Server PDF generated.' });
    } catch (e: any) {
      toast({ title: 'Export failed', description: e.message, variant: 'destructive' });
    } finally {
      setExporting(false);
    }
  };

  return (
    <div>
      <Seo title="Templates & Export — Scollab" description="Assemble approved answers and export polished PDFs." />
      <h1 className="text-2xl font-bold mb-4">Templates & Export Composer</h1>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-4">
        <Card className="lg:col-span-1">
          <CardHeader><CardTitle>Template picker</CardTitle></CardHeader>
          <CardContent className="space-y-3">
            {[
              { id: "compact", name: "Exam-compact" },
              { id: "detailed", name: "Study-detailed" },
              { id: "pocket", name: "Pocket-summary" },
            ].map((t) => (
              <label key={t.id} className="flex items-center gap-3 rounded-md border p-3 cursor-pointer hover:bg-accent/50">
                <input type="radio" name="template" checked={template===t.id} onChange={() => setTemplate(t.id)} className="accent-current" />
                <span className="text-sm">{t.name}</span>
              </label>
            ))}
          </CardContent>
        </Card>

        <Card className="lg:col-span-1">
          <CardHeader><CardTitle>Cover & Footer</CardTitle></CardHeader>
          <CardContent className="space-y-3">
            <div>
              <Label>Title</Label>
              <Input value={title} onChange={e=>setTitle(e.target.value)} placeholder="Course pack title" />
            </div>
            <div>
              <Label>Footer</Label>
              <Input value={footer} onChange={e=>setFooter(e.target.value)} placeholder="Generated by Scollab • College name" />
            </div>
            <div className="pt-2 flex gap-2 flex-wrap">
              <Button onClick={triggerBackendExport} disabled={exporting}>{exporting? 'Exporting...' : 'Server Export (PDF)'}</Button>
              {lastExport && (
                <a href={lastExport.url} target="_blank" rel="noreferrer" className="text-sm underline">Download server PDF</a>
              )}
            </div>
          </CardContent>
        </Card>

        <Card className="lg:col-span-1">
          <CardHeader><CardTitle>Preview</CardTitle></CardHeader>
          <CardContent>
            <div className="aspect-[3/4] w-full rounded-md border overflow-hidden bg-white">
              <PDFViewer width="100%" height="100%" showToolbar>
                {doc}
              </PDFViewer>
            </div>
            <div className="mt-3 flex gap-2 items-center">
              <PDFDownloadLink document={doc} fileName={`${title.replace(/\s+/g,'_')}.pdf`}>
                {({loading}) => <Button>{loading? 'Preparing...' : 'Download PDF'}</Button>}
              </PDFDownloadLink>
              <Button variant="secondary">Publish to groups</Button>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default TemplatesExport;

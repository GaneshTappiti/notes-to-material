from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
from pathlib import Path
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, PageBreak
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from fastapi.responses import FileResponse
import uuid, json

router = APIRouter()

class ExportRequest(BaseModel):
    job_id: str
    template: str
    include_promo: bool = True
    publish_to: list[str] | None = None
    title: str | None = None
    footer: str | None = None

EXPORTS: dict = {}
EXPORT_DIR = Path("storage/exports")
EXPORT_DIR.mkdir(parents=True, exist_ok=True)
RESULTS_DIR = Path("storage/job_results")

def _load_job_items(job_id: str):
    fp = RESULTS_DIR / f"{job_id}.json"
    if not fp.exists():
        return []
    try:
        data = json.loads(fp.read_text())
        return data.get("items", [])
    except Exception:
        return []

def _build_pdf(export_path: Path, title: str, footer: str, template: str, items: list[dict]):
    styles = getSampleStyleSheet()
    story = []
    if template == 'compact':
        story.append(Paragraph(title, styles['Title']))
        story.append(Spacer(1, 12))
    elif template == 'detailed':
        story.append(Paragraph(title, styles['Title']))
        story.append(Paragraph('Detailed Study Pack', styles['Heading2']))
        story.append(Spacer(1, 24))
    elif template == 'pocket':
        story.append(Paragraph(title, styles['Heading1']))
        story.append(Paragraph('Pocket Revision Summary', styles['Italic']))
        story.append(Spacer(1, 18))
    else:  # fallback
        story.append(Paragraph(title, styles['Title']))
        story.append(Spacer(1, 12))

    for idx, it in enumerate(items):
        q = it.get('question') or it.get('question_text') or f'Question {idx+1}'
        answers = it.get('answers') or {}
        # Template-specific question formatting
        if template == 'pocket':
            story.append(Paragraph(f"<b>{idx+1}.</b> {q}", styles['BodyText']))
        else:
            story.append(Paragraph(f"<b>Q{idx+1}.</b> {q}", styles['Heading4']))
        if answers:
            for mark_key in sorted(answers.keys(), key=lambda x: int(x)):
                label = f"{mark_key}M" if template != 'pocket' else ''
                ans_text = answers[mark_key]
                if template == 'detailed':
                    story.append(Paragraph(f"<i>{label} Answer (expanded):</i> {ans_text}", styles['BodyText']))
                elif template == 'pocket':
                    trimmed = ans_text[:140] + ('â€¦' if len(ans_text)>140 else '')
                    story.append(Paragraph(f"{trimmed}", styles['BodyText']))
                else:  # compact
                    story.append(Paragraph(f"<i>{label}:</i> {ans_text}", styles['BodyText']))
                story.append(Spacer(1, 4))
        else:
            ans = it.get('answer','')
            if ans:
                story.append(Paragraph(ans, styles['BodyText']))
        story.append(Spacer(1, 10 if template=='compact' else 16))
        if (idx+1) % (16 if template=='compact' else 10) == 0:
            story.append(PageBreak())

    story.append(Spacer(1, 24))
    story.append(Paragraph(footer, styles['Normal']))
    doc = SimpleDocTemplate(str(export_path), pagesize=A4, title=title)
    doc.build(story)

@router.post('/exports')
async def create_export(payload: ExportRequest):
    export_id = str(uuid.uuid4())
    items = _load_job_items(payload.job_id)
    export_path = EXPORT_DIR / f"{export_id}.pdf"
    title = payload.title or f"Export {payload.job_id}" 
    footer = payload.footer or "Generated by Scollab"
    try:
        _build_pdf(export_path, title, footer, payload.template, items)
        EXPORTS[export_id] = {"status": "ready", "path": str(export_path), "job_id": payload.job_id}
    except Exception as e:
        EXPORTS[export_id] = {"status": "error", "error": str(e)}
        raise HTTPException(status_code=500, detail=f"Export failed: {e}")
    return {"export_id": export_id, "status": "ready", "download_url": f"/api/exports/{export_id}/download"}

@router.post('/export/{job_id}')
async def quick_export(job_id: str):
    # Convenience endpoint matching spec /export/:jobId
    payload = ExportRequest(job_id=job_id, template="compact")
    return await create_export(payload)

@router.get('/exports/{export_id}')
async def export_status(export_id: str):
    data = EXPORTS.get(export_id)
    if not data:
        raise HTTPException(status_code=404, detail="Not found")
    return data

@router.get('/exports/{export_id}/download')
async def download_export(export_id: str):
    data = EXPORTS.get(export_id)
    if not data:
        raise HTTPException(status_code=404, detail="Not found")
    if data.get('status') != 'ready':
        raise HTTPException(status_code=400, detail="Export not ready")
    return FileResponse(path=data['path'], filename=f"{export_id}.pdf", media_type='application/pdf')
